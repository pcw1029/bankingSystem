# Requirement Specification

## 1. OOP Project Version1
###  1.1 기능
<pre>
	계좌 개설
	입금
	출금
	전체 고객 잔액 조회
</pre>

### 1.2 주의사항
<pre>
	ID(통장 계좌번호)는 중복되지 않는다.(계좌 개설시 증복되는 계좌 번호의 입력이 없을것이라는 가정)
	입금 및 출금액은 무조건 0보다 크다.(고객이 항상 0이상의 값만을 입력할 것이라는 가정)
	고객의 계좌에 관한 정보는 계좌번호, 고객이름, 고객의 잔액 이렇게 3가지만 저장 및 관리한다.
	저장의 형태는 배열을 사용한다.
</pre>

## 2. OOP Project Version2
### 2.1 Version1에서 Account구조체 안에 고객이름을 배열로 저장하였지만 Version2에서 Account 클래스로 변경하고, 고객이름을 문자열 포인터로 가진다.

## 3. OOP Project Version2.1
### 3.1 복사생성자의 필요 유무와 필요시 복사생성자를 추가한다.  

## 4. OOP Project Version2.2
### 4.1 Const 키워드를 사용하여 안정적인 코드를 완성하라.

## 5. OOP Project Version 3.0
### 5.1 클래스는 기능적 성격이 강한 클래스를 가리켜 Control클래스라 부르고, 데이터적 성격이 강한 클래스를 가리켜 Entity클래스 라고 부른다.
### 5.2 뱅킹시스템의 주요 기능은 아래와 같다.
<pre>
 1. 신규 고객 등록
 2. 입금
 3. 출금
 4. 전체 데이터 출력
</pre>
### 5.3 뱅킹시스템 3.0에서 수정 및 추가 작업
<pre>
 1. 전역 개념을 삭제하라.
 2. Control클래스를 도입하라.
     Control클래스가 프로그램의 주요 기능을 담당하게 한다.)
     2.1 AccManager라는 이름의 제어클래스를 정의하고, 전역 함수들을 멤버 함수의 형태로 적절히 변경한다.
     2.2. Account객체를 저장하기 위한 배열도 전역으로 선언되어 있었다.AccManager클래스의 멤버 변수로 포함시키자. 
</pre>

## 6. OOP Project Version 4.0
### 6.1 은행은 2가지 형태의 새로운 계좌를 선보였다.
#### 6.1.1 신용계좌 : 신용등급이 높고 앞으로 좋은 거래실적이 예상되는 고객을 대상으로(입금시 바로 1% 이자가 추가로 더해진다.) 
#### 6.1.2 기부계좌 : 이계좌는 입금액의 1%로 해당하는 금액이 사회 기부금으로 기여된다.(기부금액의 총액에 대한 정보가 존재한다. 현재 잔액 정보에 포함)
### 6.2 계좌 개설시 계좌를 선택할 수 있도록 해야한다.

## 7. OOP Project Version 4.1
### 7.1 하나의 파일에 여러 클래스들이 들어가있어 보기 안좋다. 따라서 각 클래스를 파일로 분리하여 작성하자.

## 8. OOP Project Version 5
### 8.1 Account 클래스의 대입연사자를 적용(현재 사용하지 않지만 확장성을 위해 정의해 둔다.)
### 8.2 기존 배열클래스로 선언했던 부분을 객체포인터를 저장하기 위한 컨테이너 클래스를 사용한다.
#### 8.2.1 컨테이너 클래스의 기능은 객체(객체포인터)의 저장/삭제 및 참조에 대한 것을 추상화시키는 것이다.
#### 8.2.2 객체를 저장하는 방식이 바뀐다고 해도, 컨테이너 클래스에만 변경이 생긴다. 다른 클래스들은 전혀 바뀔 필요가 없다.
#### 8.2.3 배열형태로 객체를 저장하는 구조에서 리스트 형태로 객체의 저장 방식을 변경한다고 해도, 컨테이너 클래스 이외의 영역은 절대 변경되지 않는다. 즉, 확장성이 좋아진다.
    
## 9. OOP Project Version 5.5
### 9.1 11장에서 만들었던 String클래스를 적용한다.
#### 9.1.1 String클래스는 저장해야 할 문자열을 동적 할당하는 형태를 취한다. 그러므로 Account클래스가 지녀할 문자열을 생성자 내에서 동적 할당하는 형태가 아니라, String클래스의 멤버 변수로 포함하는 형태로 변경하기로 한다.


## 10. OOP Project Version 5.6
### 10.1 Container클래스에 템플릿화 하면, 재활용성이 높아진다. 자료형에 상관없이 저장 및 삭제가 가능하기 때문이다.